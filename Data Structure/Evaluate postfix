#include <stdio.h> 
#include <ctype.h> // For isdigit() 
#include <stdlib.h> // For atoi() 
#include <stdio.h> 
#define MAX 100 
// Stack implementation 
int stack[MAX]; 
int top = -1; 
void push(int value) 
{ 
if (top < MAX - 1) 
{ 
stack[++top] = value; 
} 
else 
{ 
printf("Stack overflow\n"); 
} 
} 
int pop() 
{ 
if (top >= 0) 
{ 
return stack[top--]; 
} 
else 
{ 
printf("Stack underflow\n"); 
return -1; // Return -1 on underflow (not ideal for real numbers) } 
} 
// Function to evaluate postfix expression 
int evaluatePostfix(const char* expression) 
{ 
for (int i = 0; expression[i] != '\0'; i++) 
{ 
char ch = expression[i]; 
 if (isdigit(ch)) 
 {
// If the character is a digit, push it to the stack 
push(ch - '0'); // Convert char to int 
} 
else 
{ 
// If the character is an operator, pop two elements and perform the operation int operand2 = pop(); 
int operand1 = pop(); 
switch (ch)  
{ 
case '+': push(operand1 + operand2); break; 
case '-': push(operand1 - operand2); break; 
case '*': push(operand1 * operand2); break; 
case '/': push(operand1 / operand2); break; 
default: printf("Invalid operator: %c\n", ch); break; 
} 
} 
} 
// The final result will be at the top of the stack 
return pop(); 
} 
// Main function 
void main() 
{ 
char postfix[MAX]; 
printf("Enter a postfix expression: "); 
scanf("%s", postfix); // Get the postfix expression from the user 
int result = evaluatePostfix(postfix); 
printf("Result of postfix evaluation: %d\n", result); 
}
